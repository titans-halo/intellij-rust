name: check

on:
    push:
        branches:
            - master
            - staging
            - trying
    pull_request:
    # Trigger workflow every day to create/update caches for other builds
    # See https://docs.github.com/en/actions/guides/caching-dependencies-to-speed-up-workflows#restrictions-for-accessing-a-cache
    # to get more details about cache access
    schedule:
        -   cron: '0 3 * * *'

# Allow cancelling all previous runs for the same branch
# See https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#concurrency
concurrency:
    group: ${{ github.workflow }}-${{ github.ref }}
    cancel-in-progress: true

jobs:
    calculate-git-info:
        runs-on: ubuntu-18.04
        outputs:
            is_bors_branch: ${{ steps.calculate-git-info.outputs.is_bors_branch }}
            is_master_branch: ${{ steps.calculate-git-info.outputs.is_master_branch }}
            checked: ${{ steps.calculate-git-info.outputs.checked }}
        steps:
            - uses: actions/checkout@v2
              with:
                  fetch-depth: 0

            - name: Set up Python
              uses: actions/setup-python@v1
              with:
                  python-version: 3.7

            - name: Calculate git info
              id: calculate-git-info
              run: |
                  echo "::set-output name=is_bors_branch::${{ github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/trying' }}"
                  echo "::set-output name=is_master_branch::${{ github.ref == 'refs/heads/master'}}"
                  echo "::set-output name=checked::$(python scripts/has_successful_status.py --token ${{ github.token }} --ref ${{ github.sha }} --check_name check)"

            - name: Check git info
              run: |
                  echo "is_bors_branch: ${{ steps.calculate-git-info.outputs.is_bors_branch }}"
                  echo "is_master_branch: ${{ steps.calculate-git-info.outputs.is_master_branch }}"
                  echo "checked: ${{ steps.calculate-git-info.outputs.checked }}"

    check-license:
        runs-on: ubuntu-18.04
        steps:
            - uses: actions/checkout@v2

            - name: Check license
              run: ./check-license.sh

    build-native-code:
        needs: [ calculate-git-info ]
        # `fromJSON` is used here to convert string output to boolean
        # We always want to trigger all workflow jobs on `schedule` event because it creates/updates caches for other builds.
        # See https://docs.github.com/en/actions/guides/caching-dependencies-to-speed-up-workflows#restrictions-for-accessing-a-cache
        # to get more details about cache access
        if: ${{ github.event_name == 'schedule' || !fromJSON(needs.calculate-git-info.outputs.is_master_branch) || !fromJSON(needs.calculate-git-info.outputs.checked) }}
        strategy:
            fail-fast: true
            matrix:
                rust-version: [ 1.55.0 ]
                config:
                    - name: linux
                      arch: x86-64
                      os: ubuntu-latest
                      target: x86_64-unknown-linux-gnu
                      artifact_path: native-helper/target/x86_64-unknown-linux-gnu/release/intellij-rust-native-helper

        name: ${{ matrix.config.name }}-${{ matrix.config.arch }}
        runs-on: ${{ matrix.config.os }}
        steps:
            - name: Checkout
              uses: actions/checkout@v2

            - name: Cache native code artifact
              id: cache-native-code-artifact
              uses: actions/cache@v2.1.4
              with:
                  path: ${{ matrix.config.artifact_path }}
                  key: ${{ matrix.config.arch }}-${{ runner.os }}-native-helper-${{ matrix.rust-version }}-${{ hashFiles('native-helper/src/**', 'native-helper/Cargo.toml', 'native-helper/Cargo.lock') }}

            - name: Set up Rust
              if: ${{ !steps.cache-native-code-artifact.outputs.cache-hit }}
              uses: actions-rs/toolchain@v1
              with:
                  profile: minimal
                  toolchain: ${{ matrix.rust-version }}
                  target: ${{ matrix.config.target }}
                  default: true

            - name: Build
              if: ${{ !steps.cache-native-code-artifact.outputs.cache-hit }}
              uses: actions-rs/cargo@v1
              with:
                  command: build
                  args: --manifest-path native-helper/Cargo.toml --target ${{ matrix.config.target }} --release

            - name: Publish
              uses: actions/upload-artifact@v2
              with:
                  name: ${{ matrix.config.name }}-${{ matrix.config.arch }}
                  path: ${{ matrix.config.artifact_path }}

    check-plugin:
        needs: [ calculate-git-info, build-native-code ]
        strategy:
            # `fromJSON` is used here to convert string output to boolean
            fail-fast: ${{ fromJSON(needs.calculate-git-info.outputs.is_bors_branch) }}
            matrix:
                os: [ windows-2022 ]
                wsl-distribution: [ Ubuntu-18.04 ]
                rust-version: [ 1.55.0 ]
                base-ide: [ idea ]
                platform-version: [ 212 ]
                verify-plugin: [ false ]

        runs-on: ${{ matrix.os }}
        timeout-minutes: 120
        env:
            ORG_GRADLE_PROJECT_baseIDE: ${{ matrix.base-ide }}
            ORG_GRADLE_PROJECT_platformVersion: ${{ matrix.platform-version }}
            ORG_GRADLE_PROJECT_compileNativeCode: false

        steps:
            - uses: actions/checkout@v2

            - name: Set up JDK 11
              uses: actions/setup-java@v1
              with:
                  java-version: 11

            - name: Set up WSL
              if: matrix.wsl-distribution != null
              uses: Vampire/setup-wsl@v1
              with:
                  distribution: ${{ matrix.wsl-distribution }}
                  wsl-shell-user: test

            - name: Set up WSL 2
              if: matrix.wsl-distribution != null
              run: C:\hostedtoolcache\windows\Ubuntu\18.4.0\x64\ubuntu1804.exe config --default-user test

            - name: Set up WSL Rust
              if: matrix.wsl-distribution != null
              run: |
                  wsl curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs -o ~/rustup.sh
                  wsl chmod +x ~/rustup.sh
                  wsl ~/rustup.sh -y --default-toolchain ${{ matrix.rust-version }} --profile minimal -c rust-src rustfmt clippy
                  wsl source $HOME/.cargo/env
                  wsl rustup install --profile minimal nightly
                  wsl rustup +nightly component add rust-src
                  wsl which rustup
                  wsl which cargo

            - name: Cache cargo binaries
              uses: actions/cache@v2
              with:
                  path: |
                      ~/.cargo/bin/evcxr
                      ~/.cargo/bin/cargo-generate
                      ~/.cargo/.crates.toml
                      ~/.cargo/.crates2.json
                  key: ${{ runner.os }}-cache-cargo-binaries-${{ matrix.rust-version }}-${{ github.run_id }} # https://github.com/actions/cache/issues/342#issuecomment-673371329
                  restore-keys: |
                      ${{ runner.os }}-cache-cargo-binaries-${{ matrix.rust-version }}-

            - name: Install evcxr
              # BACKCOMPAT: Evcxr 0.11 requires at least stable-1.53 or nightly-2021-05-01
              if: matrix.os != 'windows-2022' && matrix.rust-version >= '1.53.0' && matrix.rust-version != 'nightly-2021-03-24'
              uses: actions-rs/cargo@v1
              with:
                  command: install
                  args: evcxr_repl

            - name: Install cargo-generate
              # BACKCOMPAT: zeroize dependency requires Rust 1.51.0 or newer
              if: matrix.rust-version >= '1.51.0'
              uses: actions-rs/cargo@v1
              with:
                  command: install
                  args: cargo-generate

            - name: Check environment
              run: |
                  rustc --version
                  rustup component list --installed
                  cargo install --list

            - name: Set up additional env variables
              if: matrix.rust-version == '1.41.0'
              # see https://help.github.com/en/actions/reference/workflow-commands-for-github-actions#setting-an-environment-variable
              run: |
                  echo "ORG_GRADLE_PROJECT_ideaVersion=IU-2021.2" >> $GITHUB_ENV
                  echo "ORG_GRADLE_PROJECT_clionVersion=CL-2021.2" >> $GITHUB_ENV
                  echo "ORG_GRADLE_PROJECT_nativeDebugPluginVersion=212.4746.2" >> $GITHUB_ENV

            - name: Set up test env variables
              run: echo "RUST_SRC_WITH_SYMLINK=$HOME/.rust-src" >> $GITHUB_ENV

            - name: Set up WSL env variables
              if: matrix.wsl-distribution != null
              shell: pwsh
              run: echo "CI_WSL_DISTRO=${{ matrix.wsl-distribution }}" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append

            - name: Create symlink for Rust stdlib Unix
              if: matrix.os != 'windows-2022'
              run: ln -s $(rustc --print sysroot)/lib/rustlib/src/rust $RUST_SRC_WITH_SYMLINK

            # FIXME: find out why it doesn't work on CI
            # - name: Create symlink for Rust stdlib Windows
            #  if: matrix.os == 'windows-2022'
            #  run: New-Item -ItemType Junction -Path "$env:RUST_SRC_WITH_SYMLINK" -Target "$(rustc --print sysroot)/lib/rustlib/src/rust"

            - name: Load linux binaries
              uses: actions/download-artifact@v2
              with:
                  name: linux-x86-64
                  path: bin/linux/x86-64

            - name: Download
              uses: gradle/gradle-build-action@v1
              with:
                  arguments: ":resolveDependencies -Pkotlin.incremental=false --no-daemon"

            - name: Build
              uses: gradle/gradle-build-action@v1
              with:
                  arguments: "assemble testClasses -Pkotlin.incremental=false --no-daemon"

            - name: Check
              uses: gradle/gradle-build-action@v1
              with:
                  arguments: "check -PexcludeTests=org/rustPerformanceTests/** --continue -Pkotlin.incremental=false --no-daemon"

            - name: Collect fail reports
              if: failure()
              uses: actions/upload-artifact@v2
              with:
                  name: tests-report-${{ matrix.os }}-${{ matrix.rust-version }}-${{ matrix.base-ide }}-${{ matrix.platform-version }}
                  path: |
                      build/reports/tests
                      */build/reports/tests

            - name: Verify plugin
              if: matrix.verify-plugin
              uses: gradle/gradle-build-action@v1
              with:
                  arguments: ":plugin:verifyPlugin"

            - name: Check bundled Rust formatters
              uses: gradle/gradle-build-action@v1
              with:
                  arguments: "runPrettyPrintersTests --no-daemon"

    check:
        needs: [ check-license, check-plugin ]
        runs-on: ubuntu-18.04
        steps:
            - name: Finish check
              run: echo "Check finished successfully!"
